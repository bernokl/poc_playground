#+TITLE: Following kasten.io intro
The goal is to repeat the lab to run local, to give you a local sandbox with templates alread provided.
Following https://learning.kasten.io/kubernetes/labs/first-kubernetes-cluster/lessons/lab-1/#lab
Modifying it to run local
* Intro
The course actually has a very nice overview of all the basic components
I chose not to repeat everything here, instead I encourage you to go through the start of the lab
Control plane consists of 3 processes:
- kube-apiserver
- kube-controller-manager
- etcd
- kube-scheduler
Non-control plan node runs 2 processes:
- kublet
- kube-proxy
* Lets get into the practical
** 1 Create a cluster
*** directly on hosts
The course goes through bare metal instal
We will be using [[file:standUpMinicubeUbuntu2004.org][minikube]], but I am still capturing the steps
Get the signing key.
#+BEGIN_SRC tmux :session s1
curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
#+END_SRC
Add the k8s apt repo
   #+begin_src tmux :session s1
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
   #+end_src
Install needed dependencies
   #+begin_src tmux :session s1
apt update
apt install -y kubelet kubeadm kubectl docker.io
apt-mark hold kubelet kubeadm kubectl
   #+end_src
*** Using minikube
- I used [[file:standUpMinicubeUbuntu2004.org][Minikube]] document and finally ran:
   #+begin_src tmux :session s1
minikube start --nodes 3 --driver=docker
   #+end_src
** Set up the Kubernetes control plane
   #+BEGIN_SRC json :tangle /tmp/docker-daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
   #+END_SRC
Make it executable
   #+BEGIN_src tmux :session s1
sudo cp /tmp/docker-daemon.json /etc/docker/daemon.json
   #+end_src


Only got partway through lesson 1. Runnig out of day, will pick this up again later.





Check version
   #+BEGIN_src tmux :session s1
minikube version
   #+end_src
* Install kubectl
   #+BEGIN_src tmux :session s1
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
   #+end_src
   #+BEGIN_src tmux :session s1
chmod +x kubectl
sudo mv kubectl /usr/local/bin/
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl version -o yaml
   #+end_src
* Ensure user is part of docker group
   #+BEGIN_src tmux :session s1
sudo usermod -aG docker $USER && newgrp docker
   #+end_src
* Start minicube
   #+BEGIN_src tmux :session s1
minikube start --driver=docker
   #+end_src
   #+BEGIN_src tmux :session s1
minikube status
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl get nodes
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl cluster-info
   #+end_src
* Manage addons
   #+BEGIN_src tmux :session s1
minikube addons list
   #+end_src
   #+BEGIN_src tmux :session s1
minikube addons enable <addon-name>
   #+end_src
* Dashboard
This one needs the command to remain running, so I chose not to do it in tmate.
If you have not logged out since adding your user.
Open a terminal, add your user to the group let the following command run in the new terminal.
   #+BEGIN_src tmux :session S2
# sudo usermod -aG docker $USER && newgrp docker
minikube dashboard
   #+end_src
* Enable ingress controller
I had a bit of a issue here, it ended up revolving around incorrect /etc/resolv.conf entries
These helped me trach it down
#+BEGIN_EXAMPLE
kubectl get pods -A -w
kubectl describe pod ingress-nginx-admission-create-xxxx -n ingress-nginx
#+END_EXAMPLE

   #+BEGIN_src tmux :session s1
minikube addons enable ingress
   #+end_src
* Add deployment that will stand up nginx for us
This can be flushed out a bit more, stop at each of the steps and make sure you understand what they do
   #+BEGIN_src tmux :session s1
kubectl create deployment my-nginx --image=nginx
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl get deployments.apps my-nginx
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl get pods
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl expose deployment my-nginx --name=my-nginx-svc --type=NodePort --port=80
   #+end_src
   #+BEGIN_src tmux :session s1
kubectl get svc my-nginx-svc
   #+end_src
   #+BEGIN_src tmux :session s1
minikube service my-nginx-svc --url
   #+end_src
I had to cutomize the port here to the one showed to me in the above output.
   #+BEGIN_src tmux :session s1
curl http://192.168.49.2:30486
   #+end_src


* Lets clean up what we did
   Stop to delete
   #+BEGIN_src tmux :session s1
minikube stop
   #+end_src
   #+BEGIN_src tmux :session s1
minikube delete
   #+end_src

   Feel free to poke around at the pod/service/deply if you describe them you will get to see the yaml underpinning them.
   Happy exploring
